version: '3.8'
# Podman Compose compatible configuration

services:
  # Songify Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: songify-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - FRONTEND_URL=http://localhost:8080
      - CORS_ORIGINS=http://localhost:8080,http://127.0.0.1:8080
    env_file:
      - ./backend/.env
    ports:
      - "127.0.0.1:3000:3000"  # Bind to localhost only for security
    networks:
      - songify-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      # Mount logs directory (optional)
      - backend-logs:/app/logs
    # Security hardening
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Songify Frontend (React + Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: songify-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    env_file:
      - ./frontend/.env
    ports:
      - "127.0.0.1:8080:80"  # Non-privileged port 8080 for development
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - songify-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Security hardening
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Redis for session storage (optional but recommended for production)
  redis:
    image: redis:8.0.3-alpine3.21
    container_name: songify-redis
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only for security
    networks:
      - songify-network
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Security hardening
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

networks:
  songify-network:
    driver: bridge
    name: songify-network

volumes:
  backend-logs:
    name: songify-backend-logs
  redis-data:
    name: songify-redis-data
