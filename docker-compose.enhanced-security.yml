# Enhanced Security Docker Compose with Minimal Socket Access
version: '3.8'

services:
  # Ultra-Hardened Docker Socket Proxy
  dockerproxy:
    image: tecnativa/docker-socket-proxy:latest
    container_name: songify-dockerproxy-hardened
    restart: unless-stopped
    environment:
      # MINIMAL permissions - only what's absolutely needed
      CONTAINERS: 1
      SERVICES: 0      # Disabled - not needed for basic container discovery
      SWARM: 0
      NODES: 0
      NETWORKS: 0      # Disabled - reduces attack surface
      TASKS: 0
      # ALL dangerous endpoints disabled
      POST: 0
      BUILD: 0
      COMMIT: 0
      CONFIGS: 0
      DISTRIBUTION: 0
      EXEC: 0
      IMAGES: 0
      INFO: 0
      PLUGINS: 0
      SECRETS: 0
      SESSION: 0
      SYSTEM: 0
      VERSION: 0
      VOLUMES: 0
      # Additional security
      ALLOW_RESTARTS: 0
      ALLOW_START: 0
      ALLOW_STOP: 0
    volumes:
      # This is the ONLY docker socket mount in the entire stack
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - dockerproxy-network
    # Additional security constraints
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=50m
    deploy:
      resources:
        limits:
          memory: 64M      # Even more restrictive
          cpus: '0.05'
        reservations:
          memory: 32M
          cpus: '0.01'

  # Hardened Traefik
  traefik:
    image: traefik:v3.0
    container_name: songify-traefik-hardened
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.endpoint=tcp://dockerproxy:2375"
      # Additional security settings
      - "--providers.docker.defaultRule=HostRegexp(`{catchall:.*}`)"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--log.level=WARN"  # Reduce log verbosity
      # Security middleware
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
      - "127.0.0.1:8080:8080"  # Dashboard only on localhost
    volumes:
      - traefik-letsencrypt:/letsencrypt
    networks:
      - songify-network
      - dockerproxy-network
    depends_on:
      - dockerproxy
    # Additional container security
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.middlewares=auth,security-headers"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH}"
      - "traefik.http.middlewares.security-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.security-headers.headers.customresponseheaders.X-Frame-Options=DENY"
      - "traefik.http.middlewares.security-headers.headers.customresponseheaders.X-Content-Type-Options=nosniff"

  # Your application services with enhanced security
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: songify-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
    networks:
      - songify-network
    # Additional security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,nodev
      - /app/logs:noexec,nosuid,nodev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: songify-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    networks:
      - songify-network
    # Additional security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,nodev
      - /var/cache/nginx:noexec,nosuid,nodev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"

  redis:
    image: redis:7-alpine
    container_name: songify-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - songify-network
    volumes:
      - redis-data:/data
    # Additional security
    security_opt:
      - no-new-privileges:true

networks:
  songify-network:
    driver: bridge
    name: songify-network
  dockerproxy-network:
    driver: bridge
    name: songify-dockerproxy-network
    internal: true

volumes:
  redis-data:
    name: songify-redis-data
  traefik-letsencrypt:
    name: songify-traefik-letsencrypt
