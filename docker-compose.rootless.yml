# Ultra-Secure Rootless Docker Compose
# This completely eliminates the docker.sock mounting issue
version: '3.8'

services:
  # Static Configuration Approach - No Docker Socket Required
  traefik:
    image: traefik:v3.0
    container_name: songify-traefik-static
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      # Use FILE provider instead of Docker provider
      - "--providers.file.filename=/etc/traefik/dynamic.yml"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      # NO DOCKER SOCKET AT ALL - Static config only
      - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - traefik-letsencrypt:/letsencrypt
    networks:
      - songify-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"

  # Your application services remain the same
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: songify-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
    networks:
      - songify-network
    # Static port mapping - no auto-discovery needed
    ports:
      - "3000:3000"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: songify-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    networks:
      - songify-network
    # Static port mapping
    ports:
      - "3001:80"

  redis:
    image: redis:7-alpine
    container_name: songify-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - songify-network
    volumes:
      - redis-data:/data

networks:
  songify-network:
    driver: bridge
    name: songify-network

volumes:
  redis-data:
    name: songify-redis-data
  traefik-letsencrypt:
    name: songify-traefik-letsencrypt
